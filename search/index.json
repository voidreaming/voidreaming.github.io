[{"content":"这一系列博客记录用 docker 部署 langchain-chatchat 本地知识库问答系统的全部过程，包括学习记录、踩坑经验、以及优化思路。\nLangchain-Chatchat项目介绍 根据官网介绍：Langchain-Chatchat 是基于 ChatGLM 等大语言模型与 Langchain 等应用框架实现，开源、可离线部署的检索增强生成(RAG)大模型知识库项目。\n这里的 RAG 技术是为了在避免花费巨大财力人力 fine-tuning 的情况下利用知识库提高大语言模型的准确率。RAG pipeline 如下图：\n参考：https://docs.llamaindex.ai/en/stable/getting_started/concepts/\n具体分析，RAG 核心技术可以分为：\nLoading Indexing Storing Querying Evaluation 即：\n在 loading 阶段，structure data、unstructured data 或者 api output 被加载到统称为 document 的容器里；\nindexing 阶段将 loading 阶段的 unstructured data 整理为 structured data 并将其向量化存储起来方便后续检索，即embedding data into vector store；\nquerying 阶段将根据 query 返回最合适的回答\n我们后续分析 langchain-chatchat 项目代码会发现上述 RAG 技术的具体实现。本篇博客先记录 docker 部署过程。\nDocker部署流程 根据项目 wiki ，目前docker 镜像文件已经更新到 0.2.10\n以 nvidia/cuda:12.1.1-cudnn8-devel-ubuntu22.04 为基础镜像 该版本内置并默认启用一个 Embedding 模型：bge-large-zh-v1.5，内置并默认启用 ChatGLM3-6B 部署该镜像需要提前安装对应的NVIDIA 驱动程序和 CUDA工具包。\nNVIDIA Container Toolkit 安装指南 Installing the NVIDIA Container Toolkit — NVIDIA Container Toolkit 1.14.5 documentation 确保前置包安装完成后即可启动镜像。\ndocker run -d --gpus all -p 80:8501 registry.cn-beijing.aliyuncs.com/chatchat/chatchat:0.2.10 首次拉取镜像需要较长时间，建议喝茶等待。\n拉取完成后查看镜像信息\n~$ docker images REPOSITORY TAG IMAGE ID CREATED SIZE registry.cn-beijing.aliyuncs.com/chatchat/chatchat 0.2.10 ca7876ea20ca 4 days ago 50.1GB getting-started latest ae9abf3b3b10 3 months ago 552MB voidreaming/getting-started latest ae9abf3b3b10 3 months ago 552MB \u0026lt;none\u0026gt; \u0026lt;none\u0026gt; 689e5f5388f9 3 months ago 552MB ubuntu latest 174c8c134b2a 3 months ago 77.9MB alpine 3.16.3 bfe296a52501 17 months ago 5.54MB 查看容器信息\n~$ docker ps CONTAINER ID IMAGE COMMAND CREATED STATUS PORTS NAMES ece84213a897 registry.cn-beijing.aliyuncs.com/chatchat/chatchat:0.2.10 \u0026#34;python3 /data/model…\u0026#34; 5 hours ago Up 4 hours 22/tcp, 7861/tcp, 0.0.0.0:80-\u0026gt;8501/tcp, :::80-\u0026gt;8501/tcp goofy_torvalds 上述命令中的 -p 80:8501 把项目 Chatchat WEBUI Server: [http://0.0.0.0:8501](http://0.0.0.0:8501/) 映射到了服务器默认 80 端口，部署成功后在浏览器打开服务器地址即可看到聊天窗口。\n另外API 服务 访问 http://localhost:7861/docs 坑点 Driver 版本 由于以本项目镜像以 nvidia/cuda:12.1.1-cudnn8-devel-ubuntu22.04 为基础镜像，其中 12.*版本的 cuda 对于 driver 版本有特定要求。参考https://docs.nvidia.com/cuda/cuda-toolkit-release-notes/ 最开始莫名其妙所有模型都跑在cpu 上，花了好长时间才排查出这个问题 TT\n学习归纳 部署过程中了解到了\n如何用 remote-ssh连接服务器。 docker 基本使用方法。 服务器基本维护和使用。 vscode docker 插件打开容器进行编辑。 driver 和 cuda 版本相互限制关系。 后续会写博客依次记录这些技术点。\n","date":"2024-04-09T22:44:04+08:00","image":"http://localhost:1313/p/docker%E9%83%A8%E7%BD%B2langchain-chatchat/e9e3a5e09211f2b6940cc15ad5b0f04e_hu02aa61ae1d9de35cbe238d2676170cb9_110343_120x120_fill_q75_box_smart1.jpg","permalink":"http://localhost:1313/p/docker%E9%83%A8%E7%BD%B2langchain-chatchat/","title":"Docker部署Langchain-Chatchat"},{"content":" 关于在Macos系统下操作系统实验环境搭建的记录。学校的OS实验仿照mit6.s081 实验，所以资料大多参考网上关于mit6.s081 lab的实验安装RISC-V编译器和工具链。\n注明：本实验默认配置好了 vscode 、 homegrew、 git 等工具。\n关于RISC-V编译器和工具链的介绍。 2022 年6月22日举行 WWDC宣布Mac 电脑的 CPU 架构将从 Intel 的 x86 架构换成 Arm 架构，自此，Mac 和 iPhone 以及 ipad 使用同样的架构，统一了操作系统。\nRISC-V 是一个开源的精简指令集，其相对于主流的新x86 和 ARM 处理器架构而言更为简单。RISC-V 的基础指令只有四十多条，另外更重要的一点，也是与本实验息息相关的一点就是 RISC-V 拥有完整的工具链，开发人员通过工具连=链与 cpu 进行交互，RISC-V社区已经提供了完整的工具链，并且RISC-V基金会持续维护该工具链。当前RISC-V的支持已经合并到主要的工具中，比如编译工具链gcc, 仿真工具qemu等，本次实验也会配置这些工具链。\n安装RISC-V GNU Compiler Toolchain 根据官网介绍，RISC-V GNU Compiler Toolchain 是 RISC-V C 和 C++ 交叉编译器。它支持两种编译模式：通用的 ELF/Newlib 工具链和更复杂的 Linux-ELF/glibc 工具链。\n下载源码：\ngit clone --recursive https://github.com/riscv/riscv-gnu-toolchain 温馨提示：耗时过长，大约半小时，建议喝茶等待。\n按照官方文档，接下来构建 Newlib 交叉编译器。注意到指定安装路径\n./configure --prefix=/usr/local/opt/riscv-gnu-toolchain #配置产物路径 make #编译指令 注：./configure: 这是一个常用的脚本，用于配置软件包的安装选项。--prefix=/usr/local/opt/riscv-gnu-toolchain: 这个参数指定了安装路径。\n编译过程中可能会遇到权限问题\n% make rm -rf stamps/build-gdb-newlib build-gdb-newlib rm: build-gdb-newlib/config.log: Permission denied rm: build-gdb-newlib: Permission denied make: *** [stamps/build-gdb-newlib] Error 1 此时用 sudo make 可以解决问题。\n另外编译过程中可能会遇到如下报错：\nconfigure: error: Building GDB requires GMP 4.2+, and MPFR 3.1.0+. Try the --with-gmp and/or --with-mpfr options to specify their locations. If you obtained GMP and/or MPFR from a vendor distribution package, make sure that you have installed both the libraries and the header files. They may be located in separate packages. make: *** [stamps/build-gdb-newlib] Error 1 手动安装GMP 和 MPFR 即可。\nbrew install gmp mpfr 📎若安装上面的包之后编译riscv-gnu-toolchain时gdb模块依然失败，报错： make: *** [stamps/build-gdb-newlib] Error 2 我们可以手动下载\nbrew install riscv64-elf-gdb https://formulae.brew.sh/formula/riscv64-elf-gdb 安装完成后配置环境变量。\nvim ~/.zshrc #打开配置文件 export PATH=\u0026#34;$PATH:/usr/local/opt/riscv-gnu-toolchain/bin\u0026#34; #末尾添加此行 source ~/.zshrc #使配置生效 此时在命令行输入riscv64-unknown-elf-gcc -v，如果能显示版本信息则代表安装成功。\n% riscv64-unknown-elf-gcc -v Using built-in specs. COLLECT_GCC=riscv64-unknown-elf-gcc COLLECT_LTO_WRAPPER=/usr/local/opt/riscv-gnu-toolchain/libexec/gcc/riscv64-unknown-elf/13.2.0/lto-wrapper Target: riscv64-unknown-elf Configured with: /Users/nyota/Documents/03_study/C_II/OS_experiment/riscv-gnu-toolchain/gcc/configure --target=riscv64-unknown-elf --prefix=/usr/local/opt/riscv-gnu-toolchain --disable-shared --disable-threads --enable-languages=c,c++ --with-pkgversion=gc891d8dc23e1 --with-system-zlib --enable-tls --with-newlib --with-sysroot=/usr/local/opt/riscv-gnu-toolchain/riscv64-unknown-elf --with-native-system-header-dir=/include --disable-libmudflap --disable-libssp --disable-libquadmath --disable-libgomp --disable-nls --disable-tm-clone-registry --src=.././gcc --disable-multilib --with-abi=lp64d --with-arch=rv64imafdc --with-tune=rocket --with-isa-spec=20191213 \u0026#39;CFLAGS_FOR_TARGET=-Os -mcmodel=medlow\u0026#39; \u0026#39;CXXFLAGS_FOR_TARGET=-Os -mcmodel=medlow\u0026#39; Thread model: single Supported LTO compression algorithms: zlib gcc version 13.2.0 (gc891d8dc23e1) 安装 QEMU QEMU是一个通用的开源机器模拟器和虚拟化器，用于在 ARM 架构上模拟RISC-V架构的CPU\n直接通过 brew 安装即可\nbrew install qemu 最后下载xv6 源码 git clone git@github.com:mit-pdos/xv6-riscv.git 注意xv6-riscv-fall19已经停止维护了，所以要从https://github.com/mit-pdos/xv6-riscv下载。\n在项目目录下编译，如果能进入xv6的shell则表示实验环境已搭建成功.\nmake make qemu 到目前为止我们已经完成环境的配置，可以开始调试代码啦～👋\n","date":"2024-04-05T12:20:01+08:00","image":"http://localhost:1313/p/mit6.s081-%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F01-risc-v%E5%92%8Cxv6%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/img_hu02aa61ae1d9de35cbe238d2676170cb9_200253_120x120_fill_q75_box_smart1.jpg","permalink":"http://localhost:1313/p/mit6.s081-%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F01-risc-v%E5%92%8Cxv6%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/","title":"[mit6.s081] 操作系统01-risc-v和xv6环境搭建"},{"content":"Mathematical notation in a Hugo project can be enabled by using third party JavaScript libraries.\nIn this example we will be using KaTeX Create a partial under /layouts/partials/math.html Within this partial reference the Auto-render Extension or host these scripts locally. Include the partial in your templates like so: {{ if or .Params.math .Site.Params.math }} {{ partial \u0026#34;math.html\u0026#34; . }} {{ end }} To enable KaTex globally set the parameter math to true in a project\u0026rsquo;s configuration To enable KaTex on a per page basis include the parameter math: true in content files Note: Use the online reference of Supported TeX Functions Examples Inline math: $\\varphi = \\dfrac{1+\\sqrt5}{2}= 1.6180339887…$\nBlock math: $$ \\varphi = 1+\\frac{1} {1+\\frac{1} {1+\\frac{1} {1+\\cdots} } } $$\n","date":"2019-03-08T00:00:00Z","permalink":"http://localhost:1313/p/math-typesetting/","title":"Math Typesetting"},{"content":"Emoji can be enabled in a Hugo project in a number of ways.\nThe emojify function can be called directly in templates or Inline Shortcodes .\nTo enable emoji globally, set enableEmoji to true in your site\u0026rsquo;s configuration and then you can type emoji shorthand codes directly in content files; e.g.\n🙈 :see_no_evil: 🙉 :hear_no_evil: 🙊 :speak_no_evil:\nThe Emoji cheat sheet is a useful reference for emoji shorthand codes.\nchange images finalchange images final N.B. The above steps enable Unicode Standard emoji characters and sequences in Hugo, however the rendering of these glyphs depends on the browser and the platform. To style the emoji you can either use a third party emoji font or a font stack; e.g.\n.emoji { font-family: Apple Color Emoji, Segoe UI Emoji, NotoColorEmoji, Segoe UI Symbol, Android Emoji, EmojiSymbols; }","date":"2019-03-05T00:00:00Z","image":"http://localhost:1313/p/emoji-support/the-creative-exchange-d2zvqp3fpro-unsplash_huf941de4769045cdfa8c9ee7036519a2a_35369_120x120_fill_q75_box_smart1.jpg","permalink":"http://localhost:1313/p/emoji-support/","title":"Emoji Support"}]